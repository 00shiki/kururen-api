// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entity "kururen/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateRentalHistory provides a mock function with given fields: _a0
func (_m *Repository) CreateRentalHistory(_a0 *entity.RentalHistory) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateRentalHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.RentalHistory) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRentalHistoryByID provides a mock function with given fields: _a0
func (_m *Repository) GetRentalHistoryByID(_a0 uint) (*entity.RentalHistory, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRentalHistoryByID")
	}

	var r0 *entity.RentalHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.RentalHistory, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.RentalHistory); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RentalHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRentalHistories provides a mock function with given fields: _a0
func (_m *Repository) GetUserRentalHistories(_a0 uint) ([]entity.RentalHistory, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRentalHistories")
	}

	var r0 []entity.RentalHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entity.RentalHistory, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) []entity.RentalHistory); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RentalHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
